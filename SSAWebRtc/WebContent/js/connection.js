define([ 'jquery', 'callUI', 'msrp', 'messaging'], function($, callUI, msrp, messaging) {

  // disable all buttons with class "btn-default" at first.
  $(".btn-default").prop("disabled",true);

  /**
   * WebSocket request URI, Default is guest, if password is not empty we assume "/ws/webrtc/restauth".
   */
  var requestUri = "/ws/webrtc/guest";
  var protocol = window.location.protocol;
  var address = window.location.hostname + ":" + window.location.port;
  var pathName = window.location.pathname;
  var wscSession= null;
  var audioDeviceStatus = "";
  var videoDeviceStatus = ""; 
  var tenant = null;
  /**
   * If username is given, webId is the username. If username is not provided (guest authentication),
   * the webId is the username from wscSession which is generated by SE server.
   */
  var webId = null;
  /**
   * Device token. It is for push notification functions.
   * If notification functions are enabled, service worker is registered and device token is tried to get.
   * If everything is OK, deviceToken is set, otherwise, it keep an empty string.
   * @type {string}
   */
  var deviceToken = "";

  // It is assumed that the handover REST service is deployed on the server which web sample application is hosted.
  //var restServerBaseUrl = protocol + '//' + address + pathName + "handoverservice/v1";
  var restServerBaseUrl = "https://13.63.249.131:7002/SSAWebRtc/customer.htmlhandoverservice/v1"
  var addSessionDataUrl = restServerBaseUrl + "/add/";
  var getSessionDataUrl = restServerBaseUrl + "/get/";
  var delSessionDataUrl = restServerBaseUrl + "/del/";

  /**
   * Flag to show if handover function is enabled
   */
  var handoverEnabled = getParameterByName("handover").toLowerCase() === "true";
  /**
   * Flag to show if notification function is enabled
   */
  var notificationEnabled = getParameterByName("notification").toLowerCase() === "true";

//  prepareNotification().then(function(token) {
//      deviceToken = token;
//      login();
//      $(".hibernate").show();
//    }).catch(function(error) {
//      console.warn(error);
//      login();
//    });
  
  /**
   * Handler when Register button is clicked.
   * Prepare notification and then login. If notification is enabled, device token is needed for login process.
   * So, prepareNotification must be made firstly.
   */
  $(".loginBtn").click(function() {
    prepareNotification().then(function(token) {
      deviceToken = token;
      login();
      $(".hibernate").show();
    }).catch(function(error) {
      console.warn(error);
      login();
    });
    
    var agentType = $("#specialistType option:selected").val();
    
	var ai= {
    emailId:$("#username").val().trim(),
	status:"Available",
	connectedTo:"",
	userType:"Agent",
	agentType:agentType,
	duration:""
	}
		
    $.ajax({
        url: 'https://13.63.249.131:7002/SSACallCenter/mvc/webRtc/insertUser',
        type: 'POST',
        data: JSON.stringify(ai),
        contentType: 'application/json; charset=utf-8',
        success: function (data) {
            //alert(data);
        },
        error: function () {
            //alert("error");
        }
    });
    
  }); // End-of-$(".loginBtn").click
  
  
  
  /**
   * Handler when Register button is clicked.
   * Prepare notification and then login. If notification is enabled, device token is needed for login process.
   * So, prepareNotification must be made firstly.
   */
  $(".clientloginBtn").click(function() {
    prepareNotification().then(function(token) {
      deviceToken = token;
      login();
      $(".hibernate").show();
    }).catch(function(error) {
      console.warn(error);
      login();
    });
    
    var ai= {
    emailId:$("#username").val().trim(),
	status:"Available",
	connectedTo:"",
	userType:"Customer",
	agentType:"",
	duration:""
	}
		
    $.ajax({
        url: 'https://13.63.249.131:7002/SSACallCenter/mvc/webRtc/insertUser',
        type: 'POST',
        data: JSON.stringify(ai),
        contentType: 'application/json; charset=utf-8',
        success: function (data) {
            //alert(data);
        },
        error: function () {
            //alert("error");
        }
    });
    
  }); // End-of-$(".loginBtn").click

  /**
   * Trigger click for Register button when Enter key is pressed in components of login form for convenience.
   */
  $("#loginForm").off("keypress").on("keypress", "input", function(e) {
    if (e.which == 13) {
      $(".loginBtn").trigger("click");
      return false;
    }
  });

  /**
   * Handler when "Hand Over" link is clicked.
   * Suspend the session and post session data to REST service.
   */
  $(".handover").off("click").on("click", function() {
    // close websocket with 3001
    var sessionData = JSON.parse(wscSession.suspend());
    $.post(addSessionDataUrl + webId, JSON.stringify(sessionData), function(){}, "text")
      .done(function() {
        console.log("Send session data to REST server successfully.");
      })
      .fail(function(evt) {
        console.warn("Failed to send session data to REST server with error", evt);
      })
      .always(function() {
        // try logout
        console.log("Log out now...");
        $(".logout").trigger("click");
      });
  });

  /**
   * Handler when "Hibernate" link is clicked.
   * This is for notification functions. After page is hibernated, it may receive notification from GCM.
   */
  $(".hibernate").off("click").on("click", function() {
    // do hibernate
    wscSession.hibernate(3600, function() {
      // if hibernate successfully, overlay the whole page
      $("#overlay").show();
      if (navigator.serviceWorker.controller) {
        navigator.serviceWorker.controller.postMessage("I'm going to hibernate...");
      }
      // add a listener to handle message from service worker
      navigator.serviceWorker.addEventListener("message", function(event) {
        console.log('Get a message from service worker: ', event);
        if (event.data.type === "PUSH_NOTIFICATION") {
          // reload the page to let page do rehydration
          document.location.reload();
        }
      });
    }, function(error) {
      console.log("Hibernate failed. ", error);
    } );
  });

  /**
   * Bind event for components of incoming handover notification pop-up window
   */
  $(".notifications")
    .on("click", ".handover-catch", function () { // Catch button is clicked
      var alertElem = $(this).closest(".alert"),
        sessionData = alertElem.data("sessionData"),
        resolveHandler = alertElem.data("resolveHandler"); // resolve handler of the handoverCheck promise

      // delete the session data
      $.post(delSessionDataUrl + webId)
        .done(function () {
          console.log("Session data is deleted for user: ", webId)
        });

      if (sessionData) {
        resolveHandler(sessionData); // here, the handoverCheck promise is resolved
      }
      alertElem.remove();
    })
    .on("click", ".handover-discard", function () { // Discard button is clicked
      var alertElem = $(this).closest(".alert"),
        rejectHandler = alertElem.data("rejectHandler"); // reject handler of the handoverCheck promise
      alertElem.remove();
      rejectHandler(); // here, the handoverCheck promise is rejected
    });


  /**
   * Login.
   * Do authentication first, then check handover, and then connect to SE server.
   */
  function login() {
    var username = $("#username").val().trim();
    var password = $("#password").val().trim();
    var tenant = null;//$("#tenant").val().trim();
//    if (!validateUsername(username, password)) {
//      return;
//    }
    webId = username;

    authenticate(username, password, tenant)
      .then(function (userId) {
        handoverCheck()
          .then(function (sessionData) {
            sessionStorage.setItem("sessionId", sessionData["sessionId"]);
            connect(sessionData["sessionId"], sessionData["userName"], sessionData);
            callUI.initCallUI(wscSession);
          })
          .catch(function (error) {
            console.log(error);
            connect(null, userId);
          });
      })
      .catch(function () {
        // authentication failed
        $("#username").parent().addClass("has-error");
        $("#password").parent().addClass("has-error");
        $("#loginWarningMsg").text("Username or password are not correct.");
        $("#loginWarningDiv").show();
      });
    
    
	$.ajax({
		type : "POST",
		contentType : "application/json",
		url : "${home}search/api/getSearchResult",
		data : JSON.stringify(data),
		dataType : 'json',
		timeout : 100000,
		success : function(data) {
			console.log("SUCCESS: ", data);
			display(data);
		},
		error : function(e) {
			console.log("ERROR: ", e);
			display(e);
		},
		done : function(e) {
			console.log("DONE");
		}
	});
    sessionStorage.setItem("webId", webId);
  }

  /**
   * Do authentication.
   * If password is provided, do authentication through HTTP API /login.
   * @param username
   * @param password
   * @param tenant
   * @returns a Promise that resolves to "userId" when authentication is not needed
   * (the "userId" is the given username)or authentication succeed (the "userId" is null); rejects when
   * authentication fails.
   */
  function authenticate(username, password, tenant) {
    if (!password || typeof password == undefined) { // no password is provided, that is, no authentication is needed
      return Promise.resolve(username);
    } else { // do authentication through API /login
      requestUri = requestUri.replace("guest", "restauth");
      var loginUrl = protocol + '//' + address + '/login?wsc_app_uri=' + requestUri
        + (tenant ? ('&tenant_profile_key=' + tenant) : '');
      return new Promise(function(resolve, reject) {
        $.ajax({
          type : "GET",
          url : loginUrl,
          dataType : 'html',
          beforeSend: function (xhr) {
            xhr.setRequestHeader('Authorization', 'Basic ' + btoa(username + ':' + password));
          },
          success: function(data, textStatus, jqXHR) {
            resolve(null);
          },
          error: function(jqXHR, textStatus, errorThrown) {
            console.log("Error: ", jqXHR, textStatus, errorThrown);
            reject(errorThrown);
          }
        });
      });
    }
  } // End-of-function login(username, password)

  /**
   * Do handover check.
   * @returns a Promise that resolves when getting valid handovered session data from REST server and
   * the handover request is accepted, otherwise, rejects
   */
  function handoverCheck() {
    if (!handoverEnabled) {
      $(".handover").hide();
      return Promise.reject("Handover is not enabled.");
    }

    return new Promise(function(resolve, reject) {
      $.ajax({
        url: getSessionDataUrl + webId,
        cache: false
      })
        .done(function(responseData) {
          console.log("Get session Data from REST server", responseData);
          if (!responseData.userName || !responseData.sessionId) {
            reject("Username or session ID of handover data is not correct.");
          } else {
            var notifyElem = $(".handover-notify-template").clone().removeClass("call-notify-template");

            notifyElem.children('.call-notify-header').text("An incoming handed over call");

            notifyElem.data("sessionData", responseData);
            notifyElem.data("resolveHandler", resolve);
            notifyElem.data("rejectHandler", reject);
            notifyElem.appendTo(".notifications").show();
          }
        })
        .fail(function() {
          reject("No handover info is found in server.");
        });
    });
  }

  /**
   * Connect to SE server.
   * @param sessionId
   * @param username
   * @param sessionData
   */
  function connect(sessionId, username, sessionData) {
    //var wsUri = protocol.replace(/^http/, 'ws') + '//' + address + requestUri, tenant = $("#tenant").val().trim();
    var wsUri = "wss://13.63.249.131:7002/ws/webrtc/guest";
    // The payloads for notification functions
    var payloads = null;
    if (deviceToken !== "") {
      payloads = {
        "capability": {
          // this should be same as the "Application Id" field of notification service configuration of wsc-console page
          "appid": "oracle.wsc.samples.web",
          "appversion": "0.1"
        },
        "devicetoken": deviceToken
      };
    }

    if (tenant) {
      wsUri += '?tenant_profile_key=' + tenant;
    }

    if (sessionId) {
      wscSession = new wsc.Session(username, wsUri, onSuccess, onFailed, sessionId, null, payloads, sessionData);
      wscSession.isRefresh = true;
    } else {
      wscSession = new wsc.Session(username, wsUri, onSuccess, onFailed, undefined, null, payloads);
    }

    wscSession.onSessionStateChange = function(state) {
      if (state === wsc.SESSIONSTATE.FAILED) {
        sessionStorage.removeItem("sessionId");
        sessionStorage.removeItem("loginUri");
        sessionStorage.removeItem("userName");
        sessionStorage.removeItem("webId");
      }
    };

    var authHandler = new wsc.AuthHandler(wscSession);
    authHandler.refresh = function(authType, authHeaders) {
      var authInfo = null;
      if(authType == wsc.AUTHTYPE.SERVICE) {
        authInfo = getServiceAuth(authHeaders);
      } else if (authType == wsc.AUTHTYPE.TURN) {
        authInfo = getTurnInfo();
      }
      return authInfo;
    };
  } // End-of-function connect(sessionId, username)

  /**
   * Get SIP challenge information from Browser client.
   *
   * @param authheaders
   * @returns JSON format String, e.g. {'username' : 'alice', 'password' : 'welcome1'}
   */
  function getServiceAuth(authheaders) {
    var authInfo = null;
    while (authInfo == null) {
      authInfo = getAuthInfo(authheaders);
    }
    return authInfo;
  }

  /**
   * Challenge with Browser client, need user to input account and password.
   *
   * @param authHeaders
   * @returns JSON format String, e.g. {'username' : 'alice', 'password' : 'welcome1'}
   */
  function getAuthInfo(authHeaders) {
    var strUser = '{"user":"' + wscSession.getUserName() + '","password":"welcome1"}',
      authStr = window.prompt("Input user/password:", strUser);
    if (authStr == null) {
      return null;
    }
    var userObj = JSON.parse(authStr),
      username = userObj.user,
      passowrd = userObj.password;
    return {'username' : username, 'password' : passowrd};
  }

  /**
   * Get iceServers settings.
   * @return ice server array
   */
  function getTurnInfo() {
    var iceServers = $("#iceServers").val(), iceConfig = null;
    if (iceServers) {
      iceConfig = {};
      var servers = iceServers.split(";"), iceServersArray = [];
      for (var i = 0; i < servers.length; i++) {
        iceServersArray.push(JSON.parse(servers[i].trim()));
      }
      iceConfig.iceServers = iceServersArray;
    }
    return iceConfig;
  }

  /**
   * Callback function when create session (connect SE server) fails.
   */
  function onFailed() {
    $("#loginWarningMsg").text("Register failure, please input correct username and password and try again");
    $("#loginWarningDiv").show();
    msrp.destroy();
    messaging.destroy();
  } // End-of-function onFailed()

  /**
   * Callback function when create session (connect SE server) succeeds.
   */
  function onSuccess() {
    if (sessionStorage.getItem("sessionId")) {
      console.log("For rehydration case, we should init call when session created not in success callback!");
    } else {
      callUI.initCallUI(wscSession);
    }

    msrp.init(wscSession);
    messaging.init(wscSession);

    var username = wscSession.getUserName();
    // this is for guest users which does not enter username when registering.
    // let the webId as the username given by WSC SE.
    if (webId == "") {
      webId = username;
    }
    $(".me").text(username);
    $(".user-banner").show();
    $(".login").hide();
    $("#registerFailure").hide();
    $(".btn-default").prop("disabled",false);
    $("#loginWarningMsg").text(""); // clear the login warning message if there is.
    $("#loginWarningDiv").hide(); // hide the login warning div.
    $("#username").parent().removeClass("has-error"); // remove the error class from username div.


    $(".logout").off("click").on("click", function() {
      if (notificationEnabled) {
        // Do unsubscribe before when logout.
        terminateNotification().then(function(successful) {
          logout();
        });
      } else {
        logout();
      }
    });

    sessionStorage.setItem("userName", username);
    sessionStorage.setItem("sessionId", wscSession.getSessionId());

    if (!wscSession.isRefresh) {
      detectAudioVideo();
    }
  } // End-of-function onSuccess()

  /**
   * Device test.
   */
  function detectAudioVideo () {
    var videoSuccess = function(stream) {
      var videoTrackLength = stream.getVideoTracks().length;
      var audioTrackLength = stream.getAudioTracks().length;
      if (videoTrackLength >= 1) {
        videoDeviceStatus = "Video device is available";
      }
      if (audioTrackLength >= 1) {
        audioDeviceStatus = "Audio device is available";
      }

      console.log("****** Video track length: " + videoTrackLength + "\n****** Audio track length: " + audioTrackLength);
      stream.getTracks().forEach(function (track) {
        track.stop();
      });
      showDevicesStatus();
    };

    var videoError = function(error) {
      console.log("Video/Audio capture error: ", error.name);

      if (error === "PERMISSION_DENIED" || error.name === "PermissionDeniedError" ) {
        videoDeviceStatus = "Video device accessing is denied";
      } else if (error.name === "DevicesNotFoundError"){
        videoDeviceStatus = "Video device is not found";
      } else {
        videoDeviceStatus = "Video device does not work";
      }
      $(".btnStartVideo").hide();
      testAudio();
    };

    var audioSuccess = function(stream) {
      audioDeviceStatus = "Audio device is available";
      showDevicesStatus();
    };

    var audioError = function(error) {
      if (error === "PERMISSION_DENIED" || error.name === "PermissionDeniedError" ) {
        audioDeviceStatus = "Audio device accessing is denied";
      } else if (error.name === "DevicesNotFoundError"){
        audioDeviceStatus = "Audio device is not found";
      } else {
        audioDeviceStatus = "Audio device does not work";
      }
      $(".btnStartAudio").hide();
      showDevicesStatus();
    };

    var testAudio = function() {
      try {
        // getUserMedia is defined in wsc-common.js(adapter.js)
        getUserMedia({"audio": true}, audioSuccess, audioError);
      } catch (e) {
        console.log(e);
      }
    };

    // getUserMedia is defined in wsc-common.js(adapter.js)
    getUserMedia({"video":true, "audio":true}, videoSuccess, videoError);
  }

  /**
   * Show results of device test.
   */
  function showDevicesStatus () {
    $("#deviceCapability").text("Current device capability: " + audioDeviceStatus + " / " + videoDeviceStatus);
    $("#deviceCapability").show();
  }
  /************************  /Device Test  ************************/

  /**
   * Prepare for notification functions.
   * 1. check if browser support notification
   * 2. if browser does not support, then reject subsequent process, print warning messages
   * 3. if browser support notification
   *      1) register service worker
   *      2) get device token
   *      3) return device token to success callback
   *
   * @return a Promise that resolves to a device token.
   */
  function prepareNotification() {
    if (!notificationEnabled) {
      return Promise.reject("Notification is not enabled.");
    }
    // register service worker
    // check if push notification is supported, if yes, enable the trigger "Hibernate".
    return new Promise(function(resolve, reject) {
      var errorMsg;
      // Check if serviceWorker is supported
      if (!('serviceWorker' in navigator)) {
        errorMsg = "Notification function disabled: serviceWorker is not supported.";
        reject(errorMsg);
      }
      // Check if showNotification function is supported in ServiceWorkerRegistration
      if (!('showNotification' in ServiceWorkerRegistration.prototype)) {
        errorMsg = "Notification function disabled: showNotification is not supported.";
        reject(errorMsg);
      }
      // Check if permission of Notification is denied
      if (Notification.permission === 'denied') {
        errorMsg = "Notification function disabled: Notification is not allowed.";
        reject(errorMsg);
      }
      // Check if PushManager is supported
      if (!('PushManager' in window)) {
        errorMsg = "Notification function disabled: PushManager is not supported.";
        reject(errorMsg);
      }

      navigator.serviceWorker.register('./serviceWorker.js').then(function(reg) {
        console.log("./serviceWorker.js is registered successfully, and the scope is: ", reg.scope );
        navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {
          console.log("serviceWorker is ready now...");
          serviceWorkerRegistration.pushManager.subscribe({userVisibleOnly: true}).then(function(pushSubscription) {
            console.log("The PushSubscription is: ", pushSubscription);
            // Here is an endpoint example, and the last part is device token.
            // https://android.googleapis.com/gcm/send/eDXppKIKa6w:APA91bH8ipza2jLXOn17uVhAExFfjdnPEvzluu3Vs7LMM74cDf_ko6LKuNHwTRHlmUe5sqqERB38sjQ-DYBt9nOSY9iFckfr1__x-UfqB9d9X2xkNVAhoL7kaFxdzd7GSXCD9tJzZzkQ
            // For Chrome 43+
            var parts = pushSubscription.endpoint.split('/');
            if (parts.length > 1) {
              var deviceToken = parts[parts.length - 1];
              resolve(deviceToken);
            } else {
              reject("Cannot get device token.");
            }
          }, function(error) {
            reject(error);
          });
        });
      });
    });
  }

  /**
   * Do unsubsribe.
   * @returns {*}
   */
  function terminateNotification() {
    return navigator.serviceWorker.ready.then(function (serviceWorkerRegistration) {
      console.log("Get the ready serviceWorkerRegistration: ", serviceWorkerRegistration);
      // Get the push subscription first
      return serviceWorkerRegistration.pushManager.getSubscription();
    }).then(function (pushSubscription) {
      console.log("Get the pushSubscription: ", pushSubscription);
      // un-subscribe the subscription
      return pushSubscription.unsubscribe();
    }).catch(function(error) {
      console.warn("Error happens: ", error);
    });
  }

  /**
   * Logout from SE server through HTTP API /logout.
   */
  function logout() {
    $(".user-banner").hide();
    $(".login").show();
    $(".me").text("Admin");
    if (wscSession != null) {
      wscSession.close();
    }
    sessionStorage.removeItem("sessionId");
    sessionStorage.removeItem("loginUri");
    sessionStorage.removeItem("userName");
    // There may be multiple parameters in the redirect_uri, so encode it.
    window.location.href = protocol + '//' + address + '/logout?wsc_app_uri=' + requestUri + "&redirect_uri=" + encodeURIComponent(window.location);
  } // End-of-function logout()

  /**
   * Get query parameter value by name.
   * @param name
   * @returns {string}
   */
  function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
      results = regex.exec(location.search);
    return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
  }

  /**
   * Check if the username is valid
   * @param username
   * @param password
   */
  function validateUsername(username, password) {
    if (password !== "") { // if has password, any string is valid
      return true;
    }
    if (username === "") { // empty string is valid
      return true;
    }
//    if (username.indexOf("@") < 0) { // string that doest not contain domain is not valid.
//      $("#username").parent().addClass("has-error");
//      $("#loginWarningMsg").text("User name must include domain for guest access");
//      $("#loginWarningDiv").show();
//      return false;
//    } else {
//      return true;
//    }
  }

  // set log level of wsc.
  wsc.setLogLevel(wsc.LOGLEVEL.DEBUG);

  /**
   * If sessionId is stored in SessionStorage, do rehydration process.
   */
  if (sessionStorage.getItem("sessionId")) {
    connect(sessionStorage.getItem("sessionId"), sessionStorage.getItem("userName"));
    callUI.initCallUI(wscSession);
    webId = sessionStorage.getItem("webId");
    if (!handoverEnabled) {
      $(".handover").hide();
    }
    if (notificationEnabled) {
      $(".hibernate").show();
    }
  } else if (window.location.hash.substring(1)) {
    $("#username").val(window.location.hash.substring(1));
    $(".loginBtn").trigger("click");
  }

});